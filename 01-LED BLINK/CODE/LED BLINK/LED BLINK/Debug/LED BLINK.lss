
LED BLINK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000035a  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f4  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b3  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018f  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00000bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000ca3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB	=	0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRC	=	0XFF;
  70:	84 bb       	out	0x14, r24	; 20
	DDRD	=	0XFF;
  72:	81 bb       	out	0x11, r24	; 17
	DDRA	=	0XFF;
  74:	8a bb       	out	0x1a, r24	; 26
	
	PORTB	=	0X00;
  76:	18 ba       	out	0x18, r1	; 24
	PORTC	=	0X00;
  78:	15 ba       	out	0x15, r1	; 21
	PORTD	=	0X00;
  7a:	12 ba       	out	0x12, r1	; 18
	PORTA	=	0X00;
  7c:	1b ba       	out	0x1b, r1	; 27

	while (1)
	{
		/*****************************************/
		for (int i = 0;i < 8;i++)
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
		{
			PINC	=	PINC | (1<<i);
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	77 e0       	ldi	r23, 0x07	; 7
  88:	60 e0       	ldi	r22, 0x00	; 0
	PORTA	=	0X00;

	while (1)
	{
		/*****************************************/
		for (int i = 0;i < 8;i++)
  8a:	e5 2f       	mov	r30, r21
  8c:	f4 2f       	mov	r31, r20
		{
			PINC	=	PINC | (1<<i);
  8e:	a3 b3       	in	r26, 0x13	; 19
  90:	9c 01       	movw	r18, r24
  92:	0e 2e       	mov	r0, r30
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x2e>
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <main+0x2a>
  9e:	3a 2f       	mov	r19, r26
  a0:	32 2b       	or	r19, r18
  a2:	33 bb       	out	0x13, r19	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	af e9       	ldi	r26, 0x9F	; 159
  a6:	b6 e8       	ldi	r27, 0x86	; 134
  a8:	c1 e0       	ldi	r28, 0x01	; 1
  aa:	a1 50       	subi	r26, 0x01	; 1
  ac:	b0 40       	sbci	r27, 0x00	; 0
  ae:	c0 40       	sbci	r28, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
			_delay_ms(500);
			PINC	=	PINC & (1<<i);
  b6:	33 b3       	in	r19, 0x13	; 19
  b8:	23 23       	and	r18, r19
  ba:	23 bb       	out	0x13, r18	; 19
	PORTA	=	0X00;

	while (1)
	{
		/*****************************************/
		for (int i = 0;i < 8;i++)
  bc:	31 96       	adiw	r30, 0x01	; 1
  be:	e8 30       	cpi	r30, 0x08	; 8
  c0:	f1 05       	cpc	r31, r1
  c2:	29 f7       	brne	.-54     	; 0x8e <main+0x22>
  c4:	e5 2f       	mov	r30, r21
  c6:	f4 2f       	mov	r31, r20
			_delay_ms(500);
			PINC	=	PINC & (1<<i);
		}
		for (int i = 0;i < 8;i++)
		{
			PIND	=	PIND | (1<<i);
  c8:	a0 b3       	in	r26, 0x10	; 16
  ca:	9c 01       	movw	r18, r24
  cc:	0e 2e       	mov	r0, r30
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x68>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <main+0x64>
  d8:	3a 2f       	mov	r19, r26
  da:	32 2b       	or	r19, r18
  dc:	30 bb       	out	0x10, r19	; 16
  de:	af e9       	ldi	r26, 0x9F	; 159
  e0:	b6 e8       	ldi	r27, 0x86	; 134
  e2:	c1 e0       	ldi	r28, 0x01	; 1
  e4:	a1 50       	subi	r26, 0x01	; 1
  e6:	b0 40       	sbci	r27, 0x00	; 0
  e8:	c0 40       	sbci	r28, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x78>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x82>
  ee:	00 00       	nop
			_delay_ms(500);
			PIND	=	PIND & (1<<i);
  f0:	30 b3       	in	r19, 0x10	; 16
  f2:	23 23       	and	r18, r19
  f4:	20 bb       	out	0x10, r18	; 16
		{
			PINC	=	PINC | (1<<i);
			_delay_ms(500);
			PINC	=	PINC & (1<<i);
		}
		for (int i = 0;i < 8;i++)
  f6:	31 96       	adiw	r30, 0x01	; 1
  f8:	e8 30       	cpi	r30, 0x08	; 8
  fa:	f1 05       	cpc	r31, r1
  fc:	29 f7       	brne	.-54     	; 0xc8 <main+0x5c>
  fe:	e5 2f       	mov	r30, r21
 100:	f4 2f       	mov	r31, r20
			_delay_ms(500);
			PIND	=	PIND & (1<<i);
		}
		for (int i = 0;i < 8;i++)
		{
			PINB	=	PINB | (1<<i);
 102:	a6 b3       	in	r26, 0x16	; 22
 104:	9c 01       	movw	r18, r24
 106:	0e 2e       	mov	r0, r30
 108:	02 c0       	rjmp	.+4      	; 0x10e <main+0xa2>
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <main+0x9e>
 112:	3a 2f       	mov	r19, r26
 114:	32 2b       	or	r19, r18
 116:	36 bb       	out	0x16, r19	; 22
 118:	af e9       	ldi	r26, 0x9F	; 159
 11a:	b6 e8       	ldi	r27, 0x86	; 134
 11c:	c1 e0       	ldi	r28, 0x01	; 1
 11e:	a1 50       	subi	r26, 0x01	; 1
 120:	b0 40       	sbci	r27, 0x00	; 0
 122:	c0 40       	sbci	r28, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0xb2>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xbc>
 128:	00 00       	nop
			_delay_ms(500);
			PINB	=	PINB & (1<<i);
 12a:	36 b3       	in	r19, 0x16	; 22
 12c:	23 23       	and	r18, r19
 12e:	26 bb       	out	0x16, r18	; 22
		{
			PIND	=	PIND | (1<<i);
			_delay_ms(500);
			PIND	=	PIND & (1<<i);
		}
		for (int i = 0;i < 8;i++)
 130:	31 96       	adiw	r30, 0x01	; 1
 132:	e8 30       	cpi	r30, 0x08	; 8
 134:	f1 05       	cpc	r31, r1
 136:	29 f7       	brne	.-54     	; 0x102 <main+0x96>
 138:	e5 2f       	mov	r30, r21
 13a:	f4 2f       	mov	r31, r20
			_delay_ms(500);
			PINB	=	PINB & (1<<i);
		}
		for (int i = 0;i < 8;i++)
		{
			PINA	=	PINA | (1<<i);
 13c:	a9 b3       	in	r26, 0x19	; 25
 13e:	9c 01       	movw	r18, r24
 140:	0e 2e       	mov	r0, r30
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0xdc>
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <main+0xd8>
 14c:	3a 2f       	mov	r19, r26
 14e:	32 2b       	or	r19, r18
 150:	39 bb       	out	0x19, r19	; 25
 152:	af e9       	ldi	r26, 0x9F	; 159
 154:	b6 e8       	ldi	r27, 0x86	; 134
 156:	c1 e0       	ldi	r28, 0x01	; 1
 158:	a1 50       	subi	r26, 0x01	; 1
 15a:	b0 40       	sbci	r27, 0x00	; 0
 15c:	c0 40       	sbci	r28, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0xec>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0xf6>
 162:	00 00       	nop
			_delay_ms(500);
			PINA	=	PINA & (1<<i);
 164:	39 b3       	in	r19, 0x19	; 25
 166:	23 23       	and	r18, r19
 168:	29 bb       	out	0x19, r18	; 25
		{
			PINB	=	PINB | (1<<i);
			_delay_ms(500);
			PINB	=	PINB & (1<<i);
		}
		for (int i = 0;i < 8;i++)
 16a:	31 96       	adiw	r30, 0x01	; 1
 16c:	e8 30       	cpi	r30, 0x08	; 8
 16e:	f1 05       	cpc	r31, r1
 170:	29 f7       	brne	.-54     	; 0x13c <main+0xd0>
 172:	e7 2f       	mov	r30, r23
 174:	f6 2f       	mov	r31, r22
			PINA	=	PINA & (1<<i);
		}
		/*****************************************/
		for (int i = 7;i >= 0;i--)
		{
			PORTA	=	PORTA | (1<<i);
 176:	ab b3       	in	r26, 0x1b	; 27
 178:	9c 01       	movw	r18, r24
 17a:	0e 2e       	mov	r0, r30
 17c:	02 c0       	rjmp	.+4      	; 0x182 <main+0x116>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <main+0x112>
 186:	3a 2f       	mov	r19, r26
 188:	32 2b       	or	r19, r18
 18a:	3b bb       	out	0x1b, r19	; 27
 18c:	af e9       	ldi	r26, 0x9F	; 159
 18e:	b6 e8       	ldi	r27, 0x86	; 134
 190:	c1 e0       	ldi	r28, 0x01	; 1
 192:	a1 50       	subi	r26, 0x01	; 1
 194:	b0 40       	sbci	r27, 0x00	; 0
 196:	c0 40       	sbci	r28, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x126>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x130>
 19c:	00 00       	nop
			_delay_ms(500);
			PORTA	=	PORTA & ~(1<<i);
 19e:	3b b3       	in	r19, 0x1b	; 27
 1a0:	20 95       	com	r18
 1a2:	23 23       	and	r18, r19
 1a4:	2b bb       	out	0x1b, r18	; 27
			PINA	=	PINA | (1<<i);
			_delay_ms(500);
			PINA	=	PINA & (1<<i);
		}
		/*****************************************/
		for (int i = 7;i >= 0;i--)
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	30 f7       	brcc	.-52     	; 0x176 <main+0x10a>
 1aa:	e7 2f       	mov	r30, r23
 1ac:	f6 2f       	mov	r31, r22
			_delay_ms(500);
			PORTA	=	PORTA & ~(1<<i);
		}
		for (int i = 7;i >= 0;i--)
		{
			PORTB	=	PORTB | (1<<i);
 1ae:	a8 b3       	in	r26, 0x18	; 24
 1b0:	9c 01       	movw	r18, r24
 1b2:	0e 2e       	mov	r0, r30
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <main+0x14e>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <main+0x14a>
 1be:	3a 2f       	mov	r19, r26
 1c0:	32 2b       	or	r19, r18
 1c2:	38 bb       	out	0x18, r19	; 24
 1c4:	af e9       	ldi	r26, 0x9F	; 159
 1c6:	b6 e8       	ldi	r27, 0x86	; 134
 1c8:	c1 e0       	ldi	r28, 0x01	; 1
 1ca:	a1 50       	subi	r26, 0x01	; 1
 1cc:	b0 40       	sbci	r27, 0x00	; 0
 1ce:	c0 40       	sbci	r28, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x15e>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x168>
 1d4:	00 00       	nop
			_delay_ms(500);
			PORTB	=	PORTB & ~(1<<i);
 1d6:	38 b3       	in	r19, 0x18	; 24
 1d8:	20 95       	com	r18
 1da:	23 23       	and	r18, r19
 1dc:	28 bb       	out	0x18, r18	; 24
		{
			PORTA	=	PORTA | (1<<i);
			_delay_ms(500);
			PORTA	=	PORTA & ~(1<<i);
		}
		for (int i = 7;i >= 0;i--)
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	30 f7       	brcc	.-52     	; 0x1ae <main+0x142>
 1e2:	e7 2f       	mov	r30, r23
 1e4:	f6 2f       	mov	r31, r22
			_delay_ms(500);
			PORTB	=	PORTB & ~(1<<i);
		}
		for (int i = 7;i >= 0;i--)
		{
			PORTD	=	PORTD | (1<<i);
 1e6:	a2 b3       	in	r26, 0x12	; 18
 1e8:	9c 01       	movw	r18, r24
 1ea:	0e 2e       	mov	r0, r30
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <main+0x186>
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <main+0x182>
 1f6:	3a 2f       	mov	r19, r26
 1f8:	32 2b       	or	r19, r18
 1fa:	32 bb       	out	0x12, r19	; 18
 1fc:	af e9       	ldi	r26, 0x9F	; 159
 1fe:	b6 e8       	ldi	r27, 0x86	; 134
 200:	c1 e0       	ldi	r28, 0x01	; 1
 202:	a1 50       	subi	r26, 0x01	; 1
 204:	b0 40       	sbci	r27, 0x00	; 0
 206:	c0 40       	sbci	r28, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x196>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x1a0>
 20c:	00 00       	nop
			_delay_ms(500);
			PORTD	=	PORTD & ~(1<<i);
 20e:	32 b3       	in	r19, 0x12	; 18
 210:	20 95       	com	r18
 212:	23 23       	and	r18, r19
 214:	22 bb       	out	0x12, r18	; 18
		{
			PORTB	=	PORTB | (1<<i);
			_delay_ms(500);
			PORTB	=	PORTB & ~(1<<i);
		}
		for (int i = 7;i >= 0;i--)
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	30 f7       	brcc	.-52     	; 0x1e6 <main+0x17a>
 21a:	e7 2f       	mov	r30, r23
 21c:	f6 2f       	mov	r31, r22
			_delay_ms(500);
			PORTD	=	PORTD & ~(1<<i);
		}
		for (int i = 7;i >= 0;i--)
		{
			PORTC	=	PORTC | (1<<i);
 21e:	a5 b3       	in	r26, 0x15	; 21
 220:	9c 01       	movw	r18, r24
 222:	0e 2e       	mov	r0, r30
 224:	02 c0       	rjmp	.+4      	; 0x22a <main+0x1be>
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <main+0x1ba>
 22e:	3a 2f       	mov	r19, r26
 230:	32 2b       	or	r19, r18
 232:	35 bb       	out	0x15, r19	; 21
 234:	af e9       	ldi	r26, 0x9F	; 159
 236:	b6 e8       	ldi	r27, 0x86	; 134
 238:	c1 e0       	ldi	r28, 0x01	; 1
 23a:	a1 50       	subi	r26, 0x01	; 1
 23c:	b0 40       	sbci	r27, 0x00	; 0
 23e:	c0 40       	sbci	r28, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0x1ce>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x1d8>
 244:	00 00       	nop
			_delay_ms(500);
			PORTC	=	PORTC & ~(1<<i);
 246:	35 b3       	in	r19, 0x15	; 21
 248:	20 95       	com	r18
 24a:	23 23       	and	r18, r19
 24c:	25 bb       	out	0x15, r18	; 21
		{
			PORTD	=	PORTD | (1<<i);
			_delay_ms(500);
			PORTD	=	PORTD & ~(1<<i);
		}
		for (int i = 7;i >= 0;i--)
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	30 f7       	brcc	.-52     	; 0x21e <main+0x1b2>
 252:	1b cf       	rjmp	.-458    	; 0x8a <main+0x1e>

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
